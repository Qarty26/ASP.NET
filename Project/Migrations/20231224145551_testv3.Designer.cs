// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Roads.Data;

#nullable disable

namespace Roads.Migrations
{
    [DbContext(typeof(RoadsContext))]
    [Migration("20231224145551_testv3")]
    partial class testv3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Roads.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Roads.Models.Hashtag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FirstCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("Roads.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EndPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Roads.Models.TrackCarRelation", b =>
                {
                    b.Property<Guid>("IdCar")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTrack")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdCar", "IdTrack");

                    b.HasIndex("IdTrack");

                    b.ToTable("TrackCarRelations");
                });

            modelBuilder.Entity("Roads.Models.TrackHashtagRelation", b =>
                {
                    b.Property<Guid>("IdHashtag")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTrack")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdHashtag", "IdTrack");

                    b.HasIndex("IdTrack");

                    b.ToTable("TrackHashtagRelations");
                });

            modelBuilder.Entity("Roads.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Roads.Models.UserTrackRelation", b =>
                {
                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTrack")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdUser", "IdTrack");

                    b.HasIndex("IdTrack");

                    b.ToTable("TrackRelations");
                });

            modelBuilder.Entity("Roads.Models.Car", b =>
                {
                    b.HasOne("Roads.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roads.Models.TrackCarRelation", b =>
                {
                    b.HasOne("Roads.Models.Car", "Car")
                        .WithMany("TrackCarRelations")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roads.Models.Track", "Track")
                        .WithMany("TrackCarRelations")
                        .HasForeignKey("IdTrack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Roads.Models.TrackHashtagRelation", b =>
                {
                    b.HasOne("Roads.Models.Hashtag", "Hashtag")
                        .WithMany("TrackHashtagRelations")
                        .HasForeignKey("IdHashtag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roads.Models.Track", "Track")
                        .WithMany("TrackHashtagRelations")
                        .HasForeignKey("IdTrack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hashtag");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Roads.Models.UserTrackRelation", b =>
                {
                    b.HasOne("Roads.Models.Track", "Track")
                        .WithMany("UserTrackRelations")
                        .HasForeignKey("IdTrack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roads.Models.User", "User")
                        .WithMany("UserTrackRelations")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roads.Models.Car", b =>
                {
                    b.Navigation("TrackCarRelations");
                });

            modelBuilder.Entity("Roads.Models.Hashtag", b =>
                {
                    b.Navigation("TrackHashtagRelations");
                });

            modelBuilder.Entity("Roads.Models.Track", b =>
                {
                    b.Navigation("TrackCarRelations");

                    b.Navigation("TrackHashtagRelations");

                    b.Navigation("UserTrackRelations");
                });

            modelBuilder.Entity("Roads.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("UserTrackRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
